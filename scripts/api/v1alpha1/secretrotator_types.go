package v1alpha1

/*
Copyright 2023.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

import (
	"reflect"

	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// ExternalSecret type metadata.
var (
	SecretKind = reflect.TypeOf(SecretRotator{}).Name()
)

// Custom Certificate path
var (
	CustomCertificatePath = "/usr/tmp/"
	CertPem               = "/cert.pem"
	KeyPem                = "/key.pem"
	CaPem                 = "/ca.pem"
	TlsCrt                = "/tls.crt"
	TlsKey                = "/tls.key"
	TlsCa                 = "/ca.crt"
)

// SecretRotatorSpec defines the desired state of SecretRotator
type SecretRotatorSpec struct {
	// INSERT ADDITIONAL SPEC FIELDS - desired state of cluster
	// Important: Run "make" to regenerate code after modifying this file
	// The spec for the ExternalSecrets to be created
	// The metadata of the external secrets to be created
	// +optional
	SecretMetadata SecretMetadata `json:"secretMetadata"`

	// SecretName holding the name of a single Docker secret
	// SecretName is optional in 2.x.x and will be deprecated in the next upcoming releases
	// Added for backward compatibility with 1.x.x
	// If specified, a Docker secret with this name is created in addition to any secrets defined in generatedSecrets.
	// +optional
	SecretName string `json:"secretName,omitempty"`

	// GeneratedSecrets defines the secrets to be created
	GeneratedSecrets []GeneratedSecret `json:"generatedSecrets,omitempty"`

	// NamespaceSelector holding SecretRotatorList of the namespaces
	NamespaceSelector metav1.LabelSelector `json:"namespaceSelector"`

	// ArtifactoryUrl, URL of Artifactory
	ArtifactoryUrl string `json:"artifactoryUrl,omitempty"`

	// RefreshInterval The time in which the controller should reconcile its objects and recheck namespaces for labels.
	RefreshInterval *metav1.Duration `json:"refreshTime,omitempty"`

	// Security holding tls/ssl certificates details
	Security SecurityDetails `json:"security,omitempty"`
}

// GeneratedSecret defines an individual secret to be created
type GeneratedSecret struct {
	// SecretName holding name of the secret
	SecretName string `json:"secretName"`
	// SecretType specifies the type of secret (docker or generic)
	SecretType string `json:"secretType"`
	// Scope defines the scope of the secret (optional)
	// +optional
	Scope string `json:"scope,omitempty"`
}

// SecurityDetails defines details for certificates, fields are insecureSkipVerify, secret nameand enable flag.
type SecurityDetails struct {
	// +kubebuilder:default:=false
	// +optional
	Enabled bool `default:"false" json:"enabled,omitempty"`
	// +optional
	CertificateSecretName string `json:"certificateSecretName,omitempty"`
	// +optional
	SecretNamespace string `json:"secretNamespace,omitempty"`
	// +optional
	InsecureSkipVerify bool `default:"false" json:"insecureSkipVerify,omitempty"`
}

// SecretMetadata defines metadata fields for the ExternalSecret generated by the SecretOperator.
type SecretMetadata struct {
	// +optional
	Annotations map[string]string `json:"annotations,omitempty"`
	// +optional
	Labels map[string]string `json:"labels,omitempty"`
}

// SecretNamespaceFailure represents a failed namespace deployment and it's reason.
type SecretNamespaceFailure struct {

	// Namespace is the namespace that failed when trying to apply an ExternalSecret
	Namespace string `json:"namespace"`

	// Reason is why the ExternalSecret failed to apply to the namespace
	// +optional
	Reason string `json:"reason,omitempty"`
}

// SecretRotatorStatus defines the observed state of SecretRotator
type SecretRotatorStatus struct {
	// Represents the observations of a Memcached's current state.
	// Memcached.status.conditions.type are: "Available", "Progressing", and "Degraded"
	// Memcached.status.conditions.status are one of True, False, Unknown.
	// Memcached.status.conditions.reason the value should be a CamelCase string and producers of specific
	// condition types may define expected values and meanings for this field, and whether the values
	// are considered a guaranteed API.
	// Memcached.status.conditions.Message is a human readable message indicating details about the transition.
	// For further information see: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#typical-status-properties

	// Conditions store the status conditions of the Memcached instances
	// +operator-sdk:csv:customresourcedefinitions:type=status
	Conditions []metav1.Condition `json:"conditions,omitempty" patchStrategy:"merge" patchMergeKey:"type" protobuf:"bytes,1,rep,name=conditions"`
	// Failed namespaces are the namespaces that failed to apply an ExternalSecret
	// +optional
	FailedNamespaces []SecretNamespaceFailure `json:"failedNamespaces,omitempty"`

	// ProvisionedNamespaces are the namespaces where the ClusterExternalSecret has secrets
	// +optional
	ProvisionedNamespaces []string `json:"provisionedNamespaces,omitempty"`

	// SecretManagedByNamespaces are the secrets in the namespaces that are managed by the SecretRotator
	// +optional
	SecretManagedByNamespaces map[string][]string `json:"secretManagedByNamespaces,omitempty"`
}

// ExternalSecretCreationPolicy defines rules on how to create the resulting Secret.

// ExternalSecretTemplate defines a blueprint for the created Secret resource.
// we can not use native corev1.Secret, it will have empty ObjectMeta values: https://github.com/kubernetes-sigs/controller-tools/issues/448

// +kubebuilder:object:root=true
// +kubebuilder:storageversion
// +kubebuilder:resource:scope=Cluster,shortName=secrot
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Refresh Interval",type=string,JSONPath=`.spec.refreshTime`
// +kubebuilder:printcolumn:name="Ready",type=string,JSONPath=`.status.conditions[?(@.type=="Ready")].status`

// SecretRotator is the Schema for the secretrotators API
type SecretRotator struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`

	Spec   SecretRotatorSpec   `json:"spec,omitempty"`
	Status SecretRotatorStatus `json:"status,omitempty"`
}

//+kubebuilder:object:root=true

// SecretRotatorList contains a list of SecretRotator
type SecretRotatorList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []SecretRotator `json:"items"`
}

func init() {

	SchemeBuilder.Register(&SecretRotator{}, &SecretRotatorList{})

}
