
apiVersion: v1
kind: Namespace
metadata:
  name: jfrog-operator
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: controller-manager
  namespace: jfrog-operator
  labels:
    control-plane: controller-manager
    app.kubernetes.io/name: deployment
    app.kubernetes.io/instance: controller-manager
    app.kubernetes.io/component: manager
    app.kubernetes.io/created-by: artifactory-secrets-rotator
    app: jfrog-operator
spec:
  selector:
    matchLabels:
      control-plane: controller-manager
  replicas: 1
  template:
    metadata:
      annotations:
        kubectl.kubernetes.io/default-container: manager
      labels:
        control-plane: controller-manager
        app: jfrog-operator
    spec:
      # TODO(user): Uncomment the following code to configure the nodeAffinity expression
      # according to the platforms which are supported by your solution.
      # It is considered best practice to support multiple architectures. You can
      # build your manager image using the makefile target docker-buildx.
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
              - matchExpressions:
                  - key: k8s.jfrog.com/customer
                    operator: In
                    values:
                      - cto-office
                #- key: kubernetes.io/arch
                #  operator: In
                #  values:
                #    - amd64
                #    - arm64
                #    - ppc64le
                #    - s390x
                #- key: kubernetes.io/os
                #  operator: In
                #  values:
                #   - linux
      securityContext:
        runAsNonRoot: true
        # TODO(user): For common cases that do not require escalating privileges
        # it is recommended to ensure that all your Pods/Containers are restrictive.
        # More info: https://kubernetes.io/docs/concepts/security/pod-security-standards/#restricted
        # Please uncomment the following code if your project does NOT have to work on old Kubernetes
        # versions < 1.19 or on vendors versions which do NOT support this field by default (i.e. Openshift < 4.11 ).
        # seccompProfile:
        #   type: RuntimeDefault
      containers:
      - command:
          - ./operator
        args:
        - --leader-elect
        image: releases-docker.jfrog.io/jfrog/jfrog-registry-operator:2.1.0
        name: manager
        ports:
        - containerPort: 8080
        - containerPort: 8081
        - containerPort: 9443
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
              - "ALL"
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8081
          initialDelaySeconds: 15
          periodSeconds: 20
        readinessProbe:
          httpGet:
            path: /readyz
            port: 8081
          initialDelaySeconds: 5
          periodSeconds: 10
        # TODO(user): Configure the resources accordingly based on the project requirements.
        # More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
        resources:
          limits:
            cpu: 250m
            memory: 128Mi
          requests:
            cpu: 10m
            memory: 64Mi
      serviceAccountName: jfrog-operator-sa
      terminationGracePeriodSeconds: 10
      imagePullSecrets:
          - name: entplus-secret
---
apiVersion: v1
kind: ServiceAccount
metadata:
  annotations:
  ## todo: should be reconfigured through helm-chart
    eks.amazonaws.com/role-arn: arn:aws:iam::000000000000:role/aws-token-exchange
  labels:
    app.kubernetes.io/name: serviceaccount
    app.kubernetes.io/instance: controller-manager
    app.kubernetes.io/component: rbac
    app.kubernetes.io/created-by: artifactory-secrets-rotator

  name: controller-manager
  namespace: jfrog-operator
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  creationTimestamp: null
  name: manager-role
rules:
- apiGroups:
  - coordination.k8s.io
  resources:
  - leases
  verbs:
  - get
  - patch
  - update
  - create
  - delete
- apiGroups:
  - apps
  - ""
  resources:
  - namespaces
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - apps
  - ""
  resources:
  - secrets
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - ""
  resources:
  - events
  verbs:
  - create
  - patch
- apiGroups:
  - apps.jfrog.com
  resources:
  - secretrotators
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - apps.jfrog.com
  resources:
  - secretrotators/finalizers
  verbs:
  - update
- apiGroups:
  - apps.jfrog.com
  resources:
  - secretrotators/status
  verbs:
  - get
  - patch
  - update
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  labels:
    app.kubernetes.io/name: clusterrolebinding
    app.kubernetes.io/instance: manager-rolebinding
    app.kubernetes.io/component: rbac
    app.kubernetes.io/created-by: artifactory-secrets-rotator

  name: manager-rolebinding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: manager-role
subjects:
- kind: ServiceAccount
  name: controller-manager
  namespace: jfrog-operator
